#
# Copyright (c) 2021-2022 Krai Ltd.
#
# SPDX-License-Identifier: BSD-3-Clause.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

###############################################################################
# PREABMLE STAGE
#
# In this stage, only perform steps that benefit the final image.
#
###############################################################################
#FROM qran-centos7:1.6.80
# NB: Feeding FROM from ARGs only works starting with Docker 1.17. 
# (CentOS 7 comes with 1.13.)
ARG BASE_IMAGE
ARG DOCKER_OS
ARG SDK_VER
FROM $BASE_IMAGE:${DOCKER_OS}_${SDK_VER} AS preamble

ARG CK_QAIC_CHECKOUT

# Use the Bash shell.
SHELL ["/bin/bash", "-c"]

# Allow stepping into the Bash shell interactively.
ENTRYPOINT ["/bin/bash", "-c"]

###############################################################################
# BUILDER STAGE
#
# In this stage, only perform steps that write into CK, CK_TOOLS, CK_REPOS,
# which can be simply copied into the final image.
#
###############################################################################
FROM krai/ck.resnet50:${DOCKER_OS}_latest AS builder
ARG CK_QAIC_PCV
ARG CK_QAIC_CHECKOUT
ARG DEBUG_BUILD

COPY --from=preamble /opt/qti-aic/ /opt/qti-aic/

ENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/opt/qti-aic/dev/lib/x86_64

ENV PATH "/usr/local/bin:${PATH}"

# Pull CK repositories.
RUN cd $(ck find repo:ck-qaic) && git checkout ${CK_QAIC_CHECKOUT} && ck pull all
RUN ck clean env --tags=lib,qaic --force && ck install package --tags=lib,qaic,master --quiet

# Set platform scripts (ensuring that ECC is on).
RUN ck detect platform.os --platform_init_uoa=qaic

# Install libncurses5.
#RUN echo "Y" | sudo apt install libncurses5

#-----------------------------------------------------------------------------#
# Step 2. Prepare the ResNet50 workload.
#-----------------------------------------------------------------------------#
# Update ("fix") the input shape from ?x224x224x3 to 1x224x224x3
# to work around a current limitation in the toolchain.

# Use precalibrated profiles.
#RUN echo "precalibrated" | ck detect soft --tags=compiler,glow,profile \
#--full_path=$(ck find repo:ck-qaic)/profile/resnet50/bs.8/profile.yaml \
#--extra_tags=resnet50,mlperf.option1,bs.8
#RUN echo "precalibrated" | ck detect soft --tags=compiler,glow,profile \
#--full_path=$(ck find repo:ck-qaic)/profile/resnet50/bs.1/profile.yaml \
#--extra_tags=resnet50,mlperf.option1,bs.1
# Calibrate the workload for bs.1 and bs.8
RUN ck install package --tags=profile,resnet50,bs.1 --quiet
RUN ck install package --tags=profile,resnet50,bs.8 --quiet
RUN ck install package --tags=profile,resnet50,bs.4 --quiet

# Compile the workload for the 16-NSP PCIe server cards.
RUN ck install package --tags=model,qaic,resnet50,resnet50.pcie.16nsp.offline --quiet
RUN ck install package --tags=model,qaic,resnet50,resnet50.pcie.16nsp.singlestream --quiet
RUN ck install package --tags=model,qaic,resnet50,resnet50.pcie.16nsp.multistream --quiet

#-----------------------------------------------------------------------------#
# Step 3. Compile the Image Classification program.
#-----------------------------------------------------------------------------#
RUN ck compile program:image-classification-qaic-loadgen --quiet

#-----------------------------------------------------------------------------#
# Step 6. Remove 'heavy' items, but only the contents so not to disturb THE FORCE.
#-----------------------------------------------------------------------------#
RUN if [[ "${DEBUG_BUILD}" != "yes" ]]; then rm -rf \
$(ck find repo:ctuning-programs)/* \
$(ck find repo:ck-crowdtuning-platforms)/* \
$(ck locate env --tags=mlperf,inference,source)/inference/.git \
$(ck locate env --tags=python-package,tensorflow)/* \
$(ck locate env --tags=lib,protobuf-host)/src \
$(ck locate env --tags=tool,cmake)/cmake*/Bootstrap.cmk \
$(ck locate env --tags=tool,cmake)/cmake*/Tests \
$(ck locate env --tags=tool,cmake)/cmake*/Source \
$(ck locate env --tags=tool,cmake)/cmake*/Utilities \
$(ck locate env --tags=model,fix_input_shape)/*; fi

###############################################################################
# FINAL STAGE
#
# In this stage, simply copy CK, CK_TOOLS, CK_REPOS to the final image.
#
###############################################################################
FROM preamble AS final
COPY --from=builder /home/krai/CK       /home/krai/CK
COPY --from=builder /home/krai/CK_REPOS /home/krai/CK_REPOS
COPY --from=builder /home/krai/CK_TOOLS /home/krai/CK_TOOLS
COPY --from=builder /imagenet/ILSVRC2012_val_00000001.JPEG /imagenet/ILSVRC2012_val_00000001.JPEG
COPY --from=builder /home/krai/.local /home/krai/.local
COPY --from=builder /home/krai/.bashrc /home/krai/.bashrc

#-----------------------------------------------------------------------------#
# Show the status of QAIC devices.
#-----------------------------------------------------------------------------#
CMD ["/opt/qti-aic/tools/qaic-util -q | grep Status"]
